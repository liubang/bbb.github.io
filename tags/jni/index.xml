<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>JNI on liubang's blog</title><link>https://iliubang.cn/tags/jni/</link><description>Recent content in JNI on liubang's blog</description><generator>Hugo</generator><language>zh-cn</language><copyright>Copyright © 2016-2024 LiuBang. All Rights Reserved.</copyright><lastBuildDate>Mon, 20 Mar 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://iliubang.cn/tags/jni/index.xml" rel="self" type="application/rss+xml"/><item><title>Java Native Interface（二）</title><link>https://iliubang.cn/posts/java/2017-03-20-java_native_interface%E4%BA%8C/</link><pubDate>Mon, 20 Mar 2017 00:00:00 +0000</pubDate><guid>https://iliubang.cn/posts/java/2017-03-20-java_native_interface%E4%BA%8C/</guid><description><![CDATA[<h2 id="1jni-基础" data-numberify>1、JNI 基础<a class="anchor ms-1" href="#1jni-基础"></a></h2>
<p>JNI 中定义了一下类型来对应到相应的 Java 的数据类型:</p>
<p><strong>1. Java 基本数据类型:</strong> <code>jint</code>,<code>jbyte</code>,<code>jshort</code>,<code>jlong</code>,<code>jfloat</code>,<code>jdouble</code>,<code>jchar</code>,<code>jboolean</code>分别对应 Java 中的<code>int</code>,<code>byte</code>,<code>short</code>,<code>long</code>,<code>float</code>,<code>double</code>,<code>char</code>和<code>boolean</code>。</p>
<p><strong>2. Java 引用类型：</strong>
<code>jobject</code>对应<code>java.lang.object</code>。同时也定义了下列子类型：</p>
<ul>
<li><code>jclass</code>对应<code>java.lang.Class</code></li>
<li><code>jstring</code>对应<code>java.lang.String</code></li>
<li><code>jthrowable</code>对应<code>java.lang.Throwable</code></li>
<li><code>jarray</code>对应 Java 中的数组。Java 中的数组由 8 种基本数据类型和一个<code>Object</code>类型派生二来，所以 JNI 中也存在<code>jintArray</code>,<code>jbyteArray</code>,<code>jshortArray</code>,<code>jlongArray</code>,<code>jfloatArray</code>,<code>jdoubleArray</code>,
<code>jcharArray</code>,<code>jbooleanArray</code>和<code>jobjectArray</code></li>
</ul>
<p>native 函数接收和返回上述的 JNI 类型数据。如果 native 函数需要操作它自己的数据类型(如 c 语言中的 int, char *)，那么就需要在 JNI 类型和本地类型之间做相应的转换。</p>
<p>简而言之，native 函数的编写流程大致为：</p>
<ol>
<li>通过 Java 程序接收 JNI 类型的参数</li>
<li>将接收的 JNI 类型转换成本地类型</li>
<li>完成相应的操作</li>
<li>创建一个需要返回的 JNI 类型的对象，然后将返回的数据 copy 到要返回的对象中</li>
<li>返回</li>
</ol>
<p>从上述流程可以看出，编写 JNI 程序主要的挑战在于数据类型之间的转换，然而 JNI 中提供了很多转换函数来帮助我们完成相应的操作。</p>
<p>JNI 是一个 c 语言的接口，c 语言并不支持 OOP 的特性(严格的说，OOP 是一种理念，这里只是从语言本身来说 c 语言不支持面向对象，实际上用 c 语言也可以写出面向对象风格的程序！)，所以他们之间并不是真的通过对象来传递。</p>]]></description></item><item><title>Java Native Interface（三）</title><link>https://iliubang.cn/posts/java/2017-03-20-java_native_interface%E4%B8%89/</link><pubDate>Mon, 20 Mar 2017 00:00:00 +0000</pubDate><guid>https://iliubang.cn/posts/java/2017-03-20-java_native_interface%E4%B8%89/</guid><description><![CDATA[<p>前面系统研究了 JNI 的相关操作，下面就来小试牛刀，做一个实际的练习。</p>
<p>记得去年我曾经用 C 语言写过一个 PHP 的 md5 扩展函数，那么今天就花一点点时间用 JNI 来实现一遍吧。</p>
<p>不过这里可要提前声明了，虽然是实现 md5 函数，但是这里并不会从头写 md5 算法，而是投机取巧使用到了 linux 内核提供的<code>crypto</code>库。</p>
<p>废话不多说，首先来写一个 Java 类</p>
<p>MyString.java</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MyString</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">static</span> {
</span></span><span style="display:flex;"><span>        System.<span style="color:#a6e22e">loadLibrary</span>(<span style="color:#e6db74">&#34;mymd5&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> String value;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">native</span> String <span style="color:#a6e22e">md5</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">MyString</span>(String value) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">value</span> <span style="color:#f92672">=</span> value;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>然后生成头文件，并实现 c 代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;jni.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;openssl/md5.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>JNIEXPORT jstring JNICALL <span style="color:#a6e22e">Java_MyString_md5</span>(JNIEnv <span style="color:#f92672">*</span>env, jobject obj) {
</span></span><span style="display:flex;"><span>    jclass thisClass <span style="color:#f92672">=</span> (<span style="color:#f92672">*</span>env)<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">GetObjectClass</span>(env, obj);
</span></span><span style="display:flex;"><span>    jfieldID fidValue <span style="color:#f92672">=</span> (<span style="color:#f92672">*</span>env)<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">GetFieldID</span>(env, thisClass, <span style="color:#e6db74">&#34;value&#34;</span>, <span style="color:#e6db74">&#34;Ljava/lang/String;&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (NULL <span style="color:#f92672">==</span> fidValue) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> NULL;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    jstring value <span style="color:#f92672">=</span> (<span style="color:#f92672">*</span>env)<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">GetObjectField</span>(env, obj, fidValue);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>data <span style="color:#f92672">=</span> (<span style="color:#f92672">*</span>env)<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">GetStringUTFChars</span>(env, value, NULL);
</span></span><span style="display:flex;"><span>    MD5_CTX ctx;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> md[<span style="color:#ae81ff">16</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> buf[<span style="color:#ae81ff">33</span>]<span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;\0&#39;</span>};
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> tmp[<span style="color:#ae81ff">3</span>]<span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;\0&#39;</span>};
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> i;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">MD5_Init</span>(<span style="color:#f92672">&amp;</span>ctx);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">MD5_Update</span>(<span style="color:#f92672">&amp;</span>ctx,data,<span style="color:#a6e22e">strlen</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)data));
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">MD5_Final</span>(md,<span style="color:#f92672">&amp;</span>ctx);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span>( i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>; i<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">16</span>; i<span style="color:#f92672">++</span> ) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">sprintf</span>(tmp,<span style="color:#e6db74">&#34;%02X&#34;</span>,md[i]);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">strcat</span>(buf,tmp);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    value <span style="color:#f92672">=</span> (<span style="color:#f92672">*</span>env)<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">NewStringUTF</span>(env, buf);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> value;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>至此代码平淡无奇，也没什么好解释的，不过需要注意的是编译成动态链接库的部分，由于这里依赖到了其他的动态链接库，所以编译参数需要使用<code>-L{path} -l{libname}</code>来显示的指明依赖库的路径和库名</p>]]></description></item><item><title>Java Native Interface（一）</title><link>https://iliubang.cn/posts/java/2017-03-17-java_native_interface%E4%B8%80/</link><pubDate>Fri, 17 Mar 2017 00:00:00 +0000</pubDate><guid>https://iliubang.cn/posts/java/2017-03-17-java_native_interface%E4%B8%80/</guid><description><![CDATA[<p>最近在整理学习笔记的时候发现了去年年中记录的 JNI 学习笔记，由于存放在了为知笔记中，而如今为知笔记已经不再免费，于是想到了将其重新整理一遍，一来可以巩固所学，二来能将其迁移到本地</p>

<h2 id="1-简介" data-numberify>1 简介<a class="anchor ms-1" href="#1-简介"></a></h2>
<p>有时候，使用 native code(c/c++)来克服 Java 中的内存管理和性能的局限性是很有必要的。Java 支持 native codes，被称作 Java Native Interface(JNI)。</p>
<p>JNI 非常难，毕竟它牵涉到了两种编程语言。假设聪明的你对 Java 和 C/C++以及 GCC 编译器已经有所了解。那么下面就一起来一步步学习 JNI 吧。</p>

<h2 id="2-开始" data-numberify>2 开始<a class="anchor ms-1" href="#2-开始"></a></h2>

<h3 id="21-用-c-语言实现第一个-jni-程序" data-numberify>2.1 用 c 语言实现第一个 JNI 程序<a class="anchor ms-1" href="#21-用-c-语言实现第一个-jni-程序"></a></h3>
<p><strong>Step1:</strong> 创建一个名字为 JNITest.java 的文件</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">JNITest</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">static</span> {
</span></span><span style="display:flex;"><span>        System.<span style="color:#a6e22e">load</span>(<span style="color:#e6db74">&#34;/home/ubuntu/workspace/java/jni/mynativelib.so&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">//申明一个无参的native方法，而且返回空</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">native</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">greet</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">//测试</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span>(String<span style="color:#f92672">[]</span> args) {
</span></span><span style="display:flex;"><span>        JNITest test <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> JNITest();
</span></span><span style="display:flex;"><span>        test.<span style="color:#a6e22e">greet</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>首先用静态代码块加载本地动态链接库&quot;mynativelib.so&quot;。对于静态代码块，我相信写过 Java 的你应该非常清楚，它只会在类被加载的时候执行一次。这个动态链接库会被添加到 Java 的 library path（保存在 Java 系统变量 java.library.path）中，如果加载失败，就会抛出<code>UnsatisfiedLinkError</code>异常。也可以使用 JVM 启动参数来加载该动态链接库到 Java 的 library path 当中：</p>]]></description></item></channel></rss>